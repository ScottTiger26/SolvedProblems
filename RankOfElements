**Problem Statment**
Problem statement
Given an array of integers 'ARR’ of size ‘N’. Replace each element of this array with its corresponding rank and return the array.



The rank of an element is an integer between 1 to ‘N’ inclusive that represents how large the element is in comparison to other elements of the array. The following rules can also define the rank of an element:



1. It is an integer starting from 1.

2. The larger the element, the larger the rank. If two elements are equal, their rank must be the same.

3. It should be as small as possible.


**Solution**
#include <vector>
#include <map>
#include <algorithm>
#include <iostream>

using namespace std;

vector<int> replaceWithRank(vector<int> &arr, int n) {
    vector<int> result(n);
    vector<pair<int, int>> sortedArr(n);
    
    // Create a vector of pairs where each pair contains the element and its original index
    for (int i = 0; i < n; ++i) {
        sortedArr[i] = {arr[i], i};
    }

    // Sort the vector based on the element values
    sort(sortedArr.begin(), sortedArr.end());

    int rank = 1;

    // Iterate through the sorted array and assign ranks
    for (int i = 0; i < n; ++i) {
        // If the current element is the same as the previous one, they get the same rank
        if (i > 0 && sortedArr[i].first != sortedArr[i - 1].first) {
            rank++;
        }
        // Assign the calculated rank to the correct index in the result
        result[sortedArr[i].second] = rank;
    }

    return result;
}

int main() {
    vector<int> arr = {40, 10, 20, 40, 30};
    int n = arr.size();
    vector<int> ranks = replaceWithRank(arr, n);

    // Output the ranks
    for (int r : ranks) {
        cout << r << " ";
    }
    cout << endl;

    return 0;
}
